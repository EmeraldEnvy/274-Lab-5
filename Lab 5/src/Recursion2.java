/**Three recursive problems. * Add your code to the four functions given below. * Do not change any part of the function headers (name, parameters, or return type). * Do not change any part of the main. */public class Recursion2 {	public static void main( String[] args ) {		int [] array = { 46, 22, 7, 58, 91, 55, 31, 84, 12, 78 };		if( findMax( array ) == 91 ) {			System.out.println( "findMax is correct!" );		}		if( reverseStr( "Hello" ).equals( "olleH" ) ) {			System.out.println( "reverseString1 is correct!" );		}			if( charFrequency( "The quick brown fox jumps over the lazy dog.", 'o' ) == 4 ) {			System.out.println( "charFrequency1 is correct!" );		}		if( findMin( array ) == 7 ) {			System.out.println( "findMin is correct!" );		}		if( reverseStr( "pupils" ).equals( "slipup" ) ) {			System.out.println( "reverseString2 is correct!" );		}			if( charFrequency( "The quick brown fox jumps over the lazy dog.", 'e' ) == 3 ) {			System.out.println( "charFrequency2 is correct!" );		}	}	//Write your facade functions here	/**	 *Creates parameters for maxArray	 * @param array	 * @return maximum value	 */	public static int findMax( int [] array ){		int i = 0;		int max = array[0];		max = maxArray( array , i, max);		return max;	}	/**	 *Creates parameters for minArray	 * @param array	 * @return minimum value	 */	public static int findMin( int [] array ){		int i = 0;		int min = array[0];		min = minArray( array , i, min);		return min;	}	/** Finds the maximum value in an array	 * @param array array of values (sorted or unsorted)	 * @param i iterator	 * @param max maximum value found so far	 * @return maximum value	 */	public static int maxArray( int [] array, int i, int max ) {		if ( i < array.length ){			if ( array[i] > max ){				//Swaps the max with the current index				max = array[i];			}			i++;			return maxArray( array , i , max );		}		return max;	}	/** Finds the maximum value in an array	 * @param array array of values (sorted or unsorted)	 * @param i iterator	 * @param min minimum value found so far	 * @return minimum value	 */	public static int minArray( int [] array, int i, int min ) {		if ( i < array.length ){			if ( array[i] < min ){				//Swaps the min with the current index				min = array[i];			}			i++;			return minArray( array , i, min);		}		return min;	}	/** Reverses a string	 * @param s the string to reverse	 * @return the reversed string	 */	public static String reverseStr( String s ) {		String reverse = "";		if ( s.length() > 0){			//Adds the last index and calls the function with the parameter being the word with its last letter removed			reverse = s.charAt(s.length()-1) + reverseStr( s.substring(0,s.length()-1));		}		return reverse;	}	/** Returns the number of times c appears in the string str	 * @param str string to test	 * @param c character to find	 * @return number of times the character appeared in the string	 */	public static int charFrequency( String str, char c ) {		if ( str.length() > 0){			//Compares index 0 to the character			if ( str.charAt(0) == c ){				//Keeps the word with the first letter removed				str = str.substring( 1 );				//Adds 1 if the characters match				return 1 + charFrequency( str , c );			}			else{				//Keeps the word with the first letter removed				str = str.substring( 1 );				return charFrequency( str , c );			}		}		return 0;	}}